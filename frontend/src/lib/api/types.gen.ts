// This file is auto-generated by @hey-api/openapi-ts

export type AnthropicChatMessageOptions = {
    max_tokens: number;
    messages: Array<MessageParam>;
    model: (string | 'claude-3-5-sonnet-20240620' | 'claude-3-opus-20240229' | 'claude-3-sonnet-20240229' | 'claude-3-haiku-20240307' | 'claude-2.1' | 'claude-2.0' | 'claude-instant-1.2');
    metadata?: MetadataParam;
    stop_sequences?: Array<(string)>;
    system?: string;
    temperature?: number;
    tool_choice?: (ToolChoiceAutoParam | ToolChoiceAnyParam | ToolChoiceToolParam);
    tools?: Array<ToolParam>;
    top_k?: number;
    top_p?: number;
    stream: true;
};

export type Body_auth_login = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type ChatCompletionFunctionCallOptionParam = {
    name: string;
};

export type ChatCompletionNamedToolChoiceParam = {
    function: openai__types__chat__chat_completion_named_tool_choice_param__Function;
    type: 'function';
};

export type type = 'function';

export type ChatCompletionStreamOptionsParam = {
    include_usage?: boolean;
};

export type ChatCompletionToolParam = {
    function: FunctionDefinition;
    type: 'function';
};

export type ChatGPTRoles = 'system' | 'user' | 'assistant' | 'function';

export type CompletionMessage = {
    role: ChatGPTRoles;
    content: string;
    name?: (string | null);
};

export type CreateNewKey = {
    api_key: string;
    key_name: string;
    api_type?: SupportedGPTs;
};

export type FunctionDefinition = {
    name: string;
    description?: string;
    parameters?: {
        [key: string]: unknown;
    };
    strict?: (boolean | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ImageBlockParam = {
    source: Source;
    type: 'image';
};

export type type2 = 'image';

export type InputSchemaTyped = {
    type: 'object';
    properties?: (unknown | null);
};

export type type3 = 'object';

export type JSONSchema = {
    name: string;
    description?: string;
    schema?: {
        [key: string]: unknown;
    };
    strict?: (boolean | null);
};

export type MessageParam = {
    content: (string | Array<(TextBlockParam | ImageBlockParam | ToolUseBlockParam | ToolResultBlockParam | TextBlock | ToolUseBlock)>);
    role: 'user' | 'assistant';
};

export type role = 'user' | 'assistant';

export type MetadataParam = {
    user_id?: (string | null);
};

export type OpenAIChatMessageOptions = {
    messages: Array<CompletionMessage>;
    model: 'o1-preview' | 'o1-preview-2024-09-12' | 'o1-mini' | 'o1-mini-2024-09-12' | 'gpt-4o' | 'gpt-4o-2024-08-06' | 'gpt-4o-2024-05-13' | 'chatgpt-4o-latest' | 'gpt-4o-mini' | 'gpt-4o-mini-2024-07-18' | 'gpt-4-turbo' | 'gpt-4-turbo-2024-04-09' | 'gpt-4-0125-preview' | 'gpt-4-turbo-preview' | 'gpt-4-1106-preview' | 'gpt-4-vision-preview' | 'gpt-4' | 'gpt-4-0314' | 'gpt-4-0613' | 'gpt-4-32k' | 'gpt-4-32k-0314' | 'gpt-4-32k-0613' | 'gpt-3.5-turbo' | 'gpt-3.5-turbo-16k' | 'gpt-3.5-turbo-0301' | 'gpt-3.5-turbo-0613' | 'gpt-3.5-turbo-1106' | 'gpt-3.5-turbo-0125' | 'gpt-3.5-turbo-16k-0613';
    frequency_penalty?: (number | null);
    function_call?: ('none' | 'auto' | ChatCompletionFunctionCallOptionParam);
    functions?: Array<openai__types__chat__completion_create_params__Function>;
    logit_bias?: ({
    [key: string]: (number);
} | null);
    logprobs?: (boolean | null);
    max_completion_tokens?: (number | null);
    max_tokens?: (number | null);
    n?: (number | null);
    parallel_tool_calls?: boolean;
    presence_penalty?: (number | null);
    response_format?: (ResponseFormatText | ResponseFormatJSONObject | ResponseFormatJSONSchema);
    seed?: (number | null);
    service_tier?: ('auto' | 'default' | null);
    stop?: (string | Array<(string)> | null);
    stream_options?: (ChatCompletionStreamOptionsParam | null);
    temperature?: (number | null);
    tool_choice?: ('none' | 'auto' | 'required' | ChatCompletionNamedToolChoiceParam);
    tools?: Array<ChatCompletionToolParam>;
    top_logprobs?: (number | null);
    top_p?: (number | null);
    user?: string;
    stream?: boolean;
    extra_headers?: (unknown | null);
    extra_query?: (unknown | null);
    extra_body?: (unknown | null);
    timeout?: (number | null);
};

export type model = 'o1-preview' | 'o1-preview-2024-09-12' | 'o1-mini' | 'o1-mini-2024-09-12' | 'gpt-4o' | 'gpt-4o-2024-08-06' | 'gpt-4o-2024-05-13' | 'chatgpt-4o-latest' | 'gpt-4o-mini' | 'gpt-4o-mini-2024-07-18' | 'gpt-4-turbo' | 'gpt-4-turbo-2024-04-09' | 'gpt-4-0125-preview' | 'gpt-4-turbo-preview' | 'gpt-4-1106-preview' | 'gpt-4-vision-preview' | 'gpt-4' | 'gpt-4-0314' | 'gpt-4-0613' | 'gpt-4-32k' | 'gpt-4-32k-0314' | 'gpt-4-32k-0613' | 'gpt-3.5-turbo' | 'gpt-3.5-turbo-16k' | 'gpt-3.5-turbo-0301' | 'gpt-3.5-turbo-0613' | 'gpt-3.5-turbo-1106' | 'gpt-3.5-turbo-0125' | 'gpt-3.5-turbo-16k-0613';

export type PublicAPIKey = {
    key_name: string;
    key_type: string;
    key: string;
};

export type PublicChatMessage = {
    role: ChatGPTRoles;
    content: string;
};

export type PublicChatSession = {
    user_id: string;
    session_id: string;
    session_name: string;
    messages: Array<PublicChatMessage>;
};

export type PublicSessionInfo = {
    session_id: string;
    session_name: string;
};

export type PublicUserInfo = {
    user_id: string;
    user_name: string;
    email: string;
};

export type ResponseFormatJSONObject = {
    type: 'json_object';
};

export type type4 = 'json_object';

export type ResponseFormatJSONSchema = {
    json_schema: JSONSchema;
    type: 'json_schema';
};

export type type5 = 'json_schema';

export type ResponseFormatText = {
    type: 'text';
};

export type type6 = 'text';

export type SessionRenameRequest = {
    name: string;
};

export type SignUp = {
    user_name?: string;
    email: string;
    password: string;
};

export type Source = {
    data: (string);
    media_type: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';
    type: 'base64';
};

export type media_type = 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';

export type type7 = 'base64';

export type SupportedGPTs = 'openai' | 'askgpt_test' | 'anthropic';

export type TextBlock = {
    text: string;
    type: 'text';
    [key: string]: unknown | string;
};

export type TextBlockParam = {
    text: string;
    type: 'text';
};

export type TokenResponse = {
    access_token: string;
    token_type?: 'bearer';
};

export type token_type = 'bearer';

export type ToolChoiceAnyParam = {
    type: 'any';
    disable_parallel_tool_use?: boolean;
};

export type type8 = 'any';

export type ToolChoiceAutoParam = {
    type: 'auto';
    disable_parallel_tool_use?: boolean;
};

export type type9 = 'auto';

export type ToolChoiceToolParam = {
    name: string;
    type: 'tool';
    disable_parallel_tool_use?: boolean;
};

export type type10 = 'tool';

export type ToolParam = {
    input_schema: (InputSchemaTyped | {
    [key: string]: unknown;
});
    name: string;
    description?: string;
};

export type ToolResultBlockParam = {
    tool_use_id: string;
    type: 'tool_result';
    content?: (string | Array<(TextBlockParam | ImageBlockParam)>);
    is_error?: boolean;
};

export type type11 = 'tool_result';

export type ToolUseBlock = {
    id: string;
    input: unknown;
    name: string;
    type: 'tool_use';
    [key: string]: unknown | string;
};

export type type12 = 'tool_use';

export type ToolUseBlockParam = {
    id: string;
    input: unknown;
    name: string;
    type: 'tool_use';
};

export type UserInfo = {
    entity_id: string;
    email: string;
    name: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type openai__types__chat__chat_completion_named_tool_choice_param__Function = {
    name: string;
};

export type openai__types__chat__completion_create_params__Function = {
    name: string;
    description?: string;
    parameters?: {
        [key: string]: unknown;
    };
};

export type HealthCheckResponse = (unknown);

export type HealthCheckError = unknown;

export type LoginData = {
    body: Body_auth_login;
};

export type LoginResponse = (TokenResponse);

export type LoginError = (HTTPValidationError);

export type SignupData = {
    body: SignUp;
};

export type SignupResponse = (unknown);

export type SignupError = (HTTPValidationError);

export type GetPublicUserResponse = (PublicUserInfo);

export type GetPublicUserError = unknown;

export type DeleteUserResponse = (unknown);

export type DeleteUserError = unknown;

export type CreateNewKeyData = {
    body: CreateNewKey;
};

export type CreateNewKeyResponse = (unknown);

export type CreateNewKeyError = (HTTPValidationError);

export type ListKeysData = {
    query?: {
        api_type?: (SupportedGPTs | null);
        as_secret?: boolean;
    };
};

export type ListKeysResponse = (Array<PublicAPIKey>);

export type ListKeysError = (HTTPValidationError);

export type RemoveKeyData = {
    path: {
        key_name: string;
    };
};

export type RemoveKeyResponse = (unknown);

export type RemoveKeyError = (HTTPValidationError);

export type FindUserByEmailData = {
    query: {
        email: string;
    };
};

export type FindUserByEmailResponse = (UserInfo);

export type FindUserByEmailError = (HTTPValidationError);

export type GetUserDetailData = {
    path: {
        user_id: string;
    };
};

export type GetUserDetailResponse = ((UserInfo | null));

export type GetUserDetailError = (HTTPValidationError);

export type ListSessionsResponse = (Array<PublicSessionInfo>);

export type ListSessionsError = unknown;

export type CreateSessionResponse = (PublicChatSession);

export type CreateSessionError = unknown;

export type GetSessionData = {
    path: {
        session_id: string;
    };
};

export type GetSessionResponse = (PublicChatSession);

export type GetSessionError = (HTTPValidationError);

export type RenameSessionData = {
    body: SessionRenameRequest;
    path: {
        session_id: string;
    };
};

export type RenameSessionResponse = (unknown);

export type RenameSessionError = (HTTPValidationError);

export type DeleteSessionData = {
    path: {
        session_id: string;
    };
};

export type DeleteSessionResponse = (void);

export type DeleteSessionError = (HTTPValidationError);

export type AddChatMessageData = {
    body: (AnthropicChatMessageOptions | OpenAIChatMessageOptions);
    path: {
        session_id: string;
    };
    query: {
        gpt_type: SupportedGPTs;
    };
};

export type AddChatMessageResponse = (unknown);

export type AddChatMessageError = (HTTPValidationError);

export type GenerateErrorPageData = {
    query?: {
        error_type?: string;
    };
};

export type GenerateErrorPageResponse = (string);

export type GenerateErrorPageError = (HTTPValidationError);