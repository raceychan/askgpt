// This file is auto-generated by @hey-api/openapi-ts

export const $AnthropicChatMessageOptions = {
    properties: {
        max_tokens: {
            type: 'integer',
            title: 'Max Tokens'
        },
        messages: {
            items: {
                '$ref': '#/components/schemas/MessageParam'
            },
            type: 'array',
            title: 'Messages'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string',
                    enum: ['claude-3-5-sonnet-20240620', 'claude-3-opus-20240229', 'claude-3-sonnet-20240229', 'claude-3-haiku-20240307', 'claude-2.1', 'claude-2.0', 'claude-instant-1.2']
                }
            ],
            title: 'Model'
        },
        metadata: {
            '$ref': '#/components/schemas/MetadataParam'
        },
        stop_sequences: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Stop Sequences'
        },
        system: {
            type: 'string',
            title: 'System'
        },
        temperature: {
            type: 'number',
            title: 'Temperature'
        },
        tool_choice: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ToolChoiceAutoParam'
                },
                {
                    '$ref': '#/components/schemas/ToolChoiceAnyParam'
                },
                {
                    '$ref': '#/components/schemas/ToolChoiceToolParam'
                }
            ],
            title: 'Tool Choice'
        },
        tools: {
            items: {
                '$ref': '#/components/schemas/ToolParam'
            },
            type: 'array',
            title: 'Tools'
        },
        top_k: {
            type: 'integer',
            title: 'Top K'
        },
        top_p: {
            type: 'number',
            title: 'Top P'
        },
        stream: {
            type: 'boolean',
            enum: [true],
            const: true,
            title: 'Stream'
        }
    },
    type: 'object',
    required: ['max_tokens', 'messages', 'model', 'stream'],
    title: 'AnthropicChatMessageOptions'
} as const;

export const $Body_auth_login = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_auth-login'
} as const;

export const $ChatCompletionFunctionCallOptionParam = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'ChatCompletionFunctionCallOptionParam'
} as const;

export const $ChatCompletionNamedToolChoiceParam = {
    properties: {
        function: {
            '$ref': '#/components/schemas/openai__types__chat__chat_completion_named_tool_choice_param__Function'
        },
        type: {
            type: 'string',
            enum: ['function'],
            const: 'function',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['function', 'type'],
    title: 'ChatCompletionNamedToolChoiceParam'
} as const;

export const $ChatCompletionStreamOptionsParam = {
    properties: {
        include_usage: {
            type: 'boolean',
            title: 'Include Usage'
        }
    },
    type: 'object',
    title: 'ChatCompletionStreamOptionsParam'
} as const;

export const $ChatCompletionToolParam = {
    properties: {
        function: {
            '$ref': '#/components/schemas/FunctionDefinition'
        },
        type: {
            type: 'string',
            enum: ['function'],
            const: 'function',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['function', 'type'],
    title: 'ChatCompletionToolParam'
} as const;

export const $ChatGPTRoles = {
    type: 'string',
    enum: ['system', 'user', 'assistant', 'function']
} as const;

export const $CompletionMessage = {
    properties: {
        role: {
            '$ref': '#/components/schemas/ChatGPTRoles'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        }
    },
    type: 'object',
    required: ['role', 'content'],
    title: 'CompletionMessage'
} as const;

export const $CreateNewKey = {
    properties: {
        api_key: {
            type: 'string',
            title: 'Api Key'
        },
        key_name: {
            type: 'string',
            title: 'Key Name'
        },
        api_type: {
            '$ref': '#/components/schemas/SupportedGPTs',
            default: 'openai'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['api_key', 'key_name'],
    title: 'CreateNewKey'
} as const;

export const $FunctionDefinition = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        parameters: {
            type: 'object',
            title: 'Parameters'
        },
        strict: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Strict'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'FunctionDefinition'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $ImageBlockParam = {
    properties: {
        source: {
            '$ref': '#/components/schemas/Source'
        },
        type: {
            type: 'string',
            enum: ['image'],
            const: 'image',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['source', 'type'],
    title: 'ImageBlockParam'
} as const;

export const $InputSchemaTyped = {
    properties: {
        type: {
            type: 'string',
            enum: ['object'],
            const: 'object',
            title: 'Type'
        },
        properties: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Properties'
        }
    },
    type: 'object',
    required: ['type'],
    title: 'InputSchemaTyped'
} as const;

export const $JSONSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        schema: {
            type: 'object',
            title: 'Schema'
        },
        strict: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Strict'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'JSONSchema'
} as const;

export const $MessageParam = {
    properties: {
        content: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    items: {
                        anyOf: [
                            {
                                '$ref': '#/components/schemas/TextBlockParam'
                            },
                            {
                                '$ref': '#/components/schemas/ImageBlockParam'
                            },
                            {
                                '$ref': '#/components/schemas/ToolUseBlockParam'
                            },
                            {
                                '$ref': '#/components/schemas/ToolResultBlockParam'
                            },
                            {
                                '$ref': '#/components/schemas/TextBlock'
                            },
                            {
                                '$ref': '#/components/schemas/ToolUseBlock'
                            }
                        ]
                    },
                    type: 'array'
                }
            ],
            title: 'Content'
        },
        role: {
            type: 'string',
            enum: ['user', 'assistant'],
            title: 'Role'
        }
    },
    type: 'object',
    required: ['content', 'role'],
    title: 'MessageParam'
} as const;

export const $MetadataParam = {
    properties: {
        user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        }
    },
    type: 'object',
    title: 'MetadataParam'
} as const;

export const $OpenAIChatMessageOptions = {
    properties: {
        messages: {
            items: {
                '$ref': '#/components/schemas/CompletionMessage'
            },
            type: 'array',
            title: 'Messages'
        },
        model: {
            type: 'string',
            enum: ['o1-preview', 'o1-preview-2024-09-12', 'o1-mini', 'o1-mini-2024-09-12', 'gpt-4o', 'gpt-4o-2024-08-06', 'gpt-4o-2024-05-13', 'chatgpt-4o-latest', 'gpt-4o-mini', 'gpt-4o-mini-2024-07-18', 'gpt-4-turbo', 'gpt-4-turbo-2024-04-09', 'gpt-4-0125-preview', 'gpt-4-turbo-preview', 'gpt-4-1106-preview', 'gpt-4-vision-preview', 'gpt-4', 'gpt-4-0314', 'gpt-4-0613', 'gpt-4-32k', 'gpt-4-32k-0314', 'gpt-4-32k-0613', 'gpt-3.5-turbo', 'gpt-3.5-turbo-16k', 'gpt-3.5-turbo-0301', 'gpt-3.5-turbo-0613', 'gpt-3.5-turbo-1106', 'gpt-3.5-turbo-0125', 'gpt-3.5-turbo-16k-0613'],
            title: 'Model'
        },
        frequency_penalty: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Frequency Penalty'
        },
        function_call: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['none', 'auto']
                },
                {
                    '$ref': '#/components/schemas/ChatCompletionFunctionCallOptionParam'
                }
            ],
            title: 'Function Call'
        },
        functions: {
            items: {
                '$ref': '#/components/schemas/openai__types__chat__completion_create_params__Function'
            },
            type: 'array',
            title: 'Functions'
        },
        logit_bias: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'integer'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Logit Bias'
        },
        logprobs: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Logprobs'
        },
        max_completion_tokens: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Completion Tokens'
        },
        max_tokens: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Tokens'
        },
        n: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'N'
        },
        parallel_tool_calls: {
            type: 'boolean',
            title: 'Parallel Tool Calls'
        },
        presence_penalty: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Presence Penalty'
        },
        response_format: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ResponseFormatText'
                },
                {
                    '$ref': '#/components/schemas/ResponseFormatJSONObject'
                },
                {
                    '$ref': '#/components/schemas/ResponseFormatJSONSchema'
                }
            ],
            title: 'Response Format'
        },
        seed: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Seed'
        },
        service_tier: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['auto', 'default']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Service Tier'
        },
        stop: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stop'
        },
        stream_options: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ChatCompletionStreamOptionsParam'
                },
                {
                    type: 'null'
                }
            ]
        },
        temperature: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Temperature'
        },
        tool_choice: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['none', 'auto', 'required']
                },
                {
                    '$ref': '#/components/schemas/ChatCompletionNamedToolChoiceParam'
                }
            ],
            title: 'Tool Choice'
        },
        tools: {
            items: {
                '$ref': '#/components/schemas/ChatCompletionToolParam'
            },
            type: 'array',
            title: 'Tools'
        },
        top_logprobs: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Top Logprobs'
        },
        top_p: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Top P'
        },
        user: {
            type: 'string',
            title: 'User'
        },
        stream: {
            type: 'boolean',
            title: 'Stream'
        },
        extra_headers: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Extra Headers'
        },
        extra_query: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Extra Query'
        },
        extra_body: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Extra Body'
        },
        timeout: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Timeout'
        }
    },
    type: 'object',
    required: ['messages', 'model'],
    title: 'OpenAIChatMessageOptions'
} as const;

export const $PublicAPIKey = {
    properties: {
        key_name: {
            type: 'string',
            title: 'Key Name'
        },
        key_type: {
            type: 'string',
            title: 'Key Type'
        },
        key: {
            type: 'string',
            title: 'Key'
        }
    },
    type: 'object',
    required: ['key_name', 'key_type', 'key'],
    title: 'PublicAPIKey'
} as const;

export const $PublicChatMessage = {
    properties: {
        role: {
            '$ref': '#/components/schemas/ChatGPTRoles'
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['role', 'content'],
    title: 'PublicChatMessage'
} as const;

export const $PublicChatSession = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        session_id: {
            type: 'string',
            title: 'Session Id'
        },
        session_name: {
            type: 'string',
            title: 'Session Name'
        },
        messages: {
            items: {
                '$ref': '#/components/schemas/PublicChatMessage'
            },
            type: 'array',
            title: 'Messages'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['user_id', 'session_id', 'session_name', 'messages'],
    title: 'PublicChatSession'
} as const;

export const $PublicSessionInfo = {
    properties: {
        session_id: {
            type: 'string',
            title: 'Session Id'
        },
        session_name: {
            type: 'string',
            title: 'Session Name'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['session_id', 'session_name'],
    title: 'PublicSessionInfo'
} as const;

export const $PublicUserInfo = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        user_name: {
            type: 'string',
            title: 'User Name'
        },
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['user_id', 'user_name', 'email'],
    title: 'PublicUserInfo'
} as const;

export const $ResponseFormatJSONObject = {
    properties: {
        type: {
            type: 'string',
            enum: ['json_object'],
            const: 'json_object',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['type'],
    title: 'ResponseFormatJSONObject'
} as const;

export const $ResponseFormatJSONSchema = {
    properties: {
        json_schema: {
            '$ref': '#/components/schemas/JSONSchema'
        },
        type: {
            type: 'string',
            enum: ['json_schema'],
            const: 'json_schema',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['json_schema', 'type'],
    title: 'ResponseFormatJSONSchema'
} as const;

export const $ResponseFormatText = {
    properties: {
        type: {
            type: 'string',
            enum: ['text'],
            const: 'text',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['type'],
    title: 'ResponseFormatText'
} as const;

export const $SessionRenameRequest = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name'],
    title: 'SessionRenameRequest'
} as const;

export const $SignUp = {
    properties: {
        user_name: {
            type: 'string',
            title: 'User Name',
            default: ''
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['email', 'password'],
    title: 'SignUp'
} as const;

export const $Source = {
    properties: {
        data: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'string',
                    format: 'path'
                }
            ],
            title: 'Data'
        },
        media_type: {
            type: 'string',
            enum: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
            title: 'Media Type'
        },
        type: {
            type: 'string',
            enum: ['base64'],
            const: 'base64',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['data', 'media_type', 'type'],
    title: 'Source'
} as const;

export const $SupportedGPTs = {
    type: 'string',
    enum: ['openai', 'askgpt_test', 'anthropic']
} as const;

export const $TextBlock = {
    properties: {
        text: {
            type: 'string',
            title: 'Text'
        },
        type: {
            type: 'string',
            enum: ['text'],
            const: 'text',
            title: 'Type'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['text', 'type'],
    title: 'TextBlock'
} as const;

export const $TextBlockParam = {
    properties: {
        text: {
            type: 'string',
            title: 'Text'
        },
        type: {
            type: 'string',
            enum: ['text'],
            const: 'text',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['text', 'type'],
    title: 'TextBlockParam'
} as const;

export const $TokenResponse = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            enum: ['bearer'],
            const: 'bearer',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['access_token'],
    title: 'TokenResponse'
} as const;

export const $ToolChoiceAnyParam = {
    properties: {
        type: {
            type: 'string',
            enum: ['any'],
            const: 'any',
            title: 'Type'
        },
        disable_parallel_tool_use: {
            type: 'boolean',
            title: 'Disable Parallel Tool Use'
        }
    },
    type: 'object',
    required: ['type'],
    title: 'ToolChoiceAnyParam'
} as const;

export const $ToolChoiceAutoParam = {
    properties: {
        type: {
            type: 'string',
            enum: ['auto'],
            const: 'auto',
            title: 'Type'
        },
        disable_parallel_tool_use: {
            type: 'boolean',
            title: 'Disable Parallel Tool Use'
        }
    },
    type: 'object',
    required: ['type'],
    title: 'ToolChoiceAutoParam'
} as const;

export const $ToolChoiceToolParam = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        type: {
            type: 'string',
            enum: ['tool'],
            const: 'tool',
            title: 'Type'
        },
        disable_parallel_tool_use: {
            type: 'boolean',
            title: 'Disable Parallel Tool Use'
        }
    },
    type: 'object',
    required: ['name', 'type'],
    title: 'ToolChoiceToolParam'
} as const;

export const $ToolParam = {
    properties: {
        input_schema: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/InputSchemaTyped'
                },
                {
                    type: 'object'
                }
            ],
            title: 'Input Schema'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['input_schema', 'name'],
    title: 'ToolParam'
} as const;

export const $ToolResultBlockParam = {
    properties: {
        tool_use_id: {
            type: 'string',
            title: 'Tool Use Id'
        },
        type: {
            type: 'string',
            enum: ['tool_result'],
            const: 'tool_result',
            title: 'Type'
        },
        content: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    items: {
                        anyOf: [
                            {
                                '$ref': '#/components/schemas/TextBlockParam'
                            },
                            {
                                '$ref': '#/components/schemas/ImageBlockParam'
                            }
                        ]
                    },
                    type: 'array'
                }
            ],
            title: 'Content'
        },
        is_error: {
            type: 'boolean',
            title: 'Is Error'
        }
    },
    type: 'object',
    required: ['tool_use_id', 'type'],
    title: 'ToolResultBlockParam'
} as const;

export const $ToolUseBlock = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        input: {
            title: 'Input'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        type: {
            type: 'string',
            enum: ['tool_use'],
            const: 'tool_use',
            title: 'Type'
        }
    },
    additionalProperties: true,
    type: 'object',
    required: ['id', 'input', 'name', 'type'],
    title: 'ToolUseBlock'
} as const;

export const $ToolUseBlockParam = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        input: {
            title: 'Input'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        type: {
            type: 'string',
            enum: ['tool_use'],
            const: 'tool_use',
            title: 'Type'
        }
    },
    type: 'object',
    required: ['id', 'input', 'name', 'type'],
    title: 'ToolUseBlockParam'
} as const;

export const $UserInfo = {
    properties: {
        entity_id: {
            type: 'string',
            title: 'Entity Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['entity_id', 'email', 'name'],
    title: 'UserInfo'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $openai__types__chat__chat_completion_named_tool_choice_param__Function = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'Function'
} as const;

export const $openai__types__chat__completion_create_params__Function = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        parameters: {
            type: 'object',
            title: 'Parameters'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'Function'
} as const;