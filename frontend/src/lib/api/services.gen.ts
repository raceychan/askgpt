// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { AuthLoginData, AuthLoginError, AuthLoginResponse, AuthSignupUserData, AuthSignupUserError, AuthSignupUserResponse, UserFindUserByEmailData, UserFindUserByEmailError, UserFindUserByEmailResponse, UserGetPublicUserError, UserGetPublicUserResponse, UserGetUserDetailData, UserGetUserDetailError, UserGetUserDetailResponse, UserDeleteUserData, UserDeleteUserError, UserDeleteUserResponse, UserAddApiKeyData, UserAddApiKeyError, UserAddApiKeyResponse, GptListSessionsError, GptListSessionsResponse, GptCreateSessionError, GptCreateSessionResponse, GptGetSessionData, GptGetSessionError, GptGetSessionResponse, GptRenameSessionData, GptRenameSessionError, GptRenameSessionResponse, GptDeleteSessionData, GptDeleteSessionError, GptDeleteSessionResponse, GptChatData, GptChatError, GptChatResponse, HealthCheckLambdaError, HealthCheckLambdaResponse } from './types.gen';

export const client = createClient(createConfig());

export class AuthService {
    /**
     * Login
     */
    public static authLogin<ThrowOnError extends boolean = false>(options: Options<AuthLoginData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthLoginResponse, AuthLoginError, ThrowOnError>({
            ...options,
            ...urlSearchParamsBodySerializer,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: '/v1/auth/login'
        });
    }
    
    /**
     * Signup User
     * Request will be redirected to user route for user info
     */
    public static authSignupUser<ThrowOnError extends boolean = false>(options: Options<AuthSignupUserData, ThrowOnError>) {
        return (options?.client ?? client).post<AuthSignupUserResponse, AuthSignupUserError, ThrowOnError>({
            ...options,
            url: '/v1/auth/signup'
        });
    }
    
}

export class UserService {
    /**
     * Find User By Email
     */
    public static userFindUserByEmail<ThrowOnError extends boolean = false>(options: Options<UserFindUserByEmailData, ThrowOnError>) {
        return (options?.client ?? client).get<UserFindUserByEmailResponse, UserFindUserByEmailError, ThrowOnError>({
            ...options,
            url: '/v1/users/'
        });
    }
    
    /**
     * Get Public User
     */
    public static userGetPublicUser<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<UserGetPublicUserResponse, UserGetPublicUserError, ThrowOnError>({
            ...options,
            url: '/v1/users/me'
        });
    }
    
    /**
     * Get User Detail
     * Private user info
     */
    public static userGetUserDetail<ThrowOnError extends boolean = false>(options: Options<UserGetUserDetailData, ThrowOnError>) {
        return (options?.client ?? client).get<UserGetUserDetailResponse, UserGetUserDetailError, ThrowOnError>({
            ...options,
            url: '/v1/users/{user_id}'
        });
    }
    
    /**
     * Delete User
     */
    public static userDeleteUser<ThrowOnError extends boolean = false>(options: Options<UserDeleteUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<UserDeleteUserResponse, UserDeleteUserError, ThrowOnError>({
            ...options,
            url: '/v1/users/{user_id}'
        });
    }
    
    /**
     * Add Api Key
     */
    public static userAddApiKey<ThrowOnError extends boolean = false>(options: Options<UserAddApiKeyData, ThrowOnError>) {
        return (options?.client ?? client).post<UserAddApiKeyResponse, UserAddApiKeyError, ThrowOnError>({
            ...options,
            url: '/v1/users/apikeys'
        });
    }
    
}

export class GptService {
    /**
     * List Sessions
     */
    public static gptListSessions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GptListSessionsResponse, GptListSessionsError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions'
        });
    }
    
    /**
     * Create Session
     */
    public static gptCreateSession<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<GptCreateSessionResponse, GptCreateSessionError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions'
        });
    }
    
    /**
     * Get Session
     */
    public static gptGetSession<ThrowOnError extends boolean = false>(options: Options<GptGetSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GptGetSessionResponse, GptGetSessionError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions/{session_id}'
        });
    }
    
    /**
     * Rename Session
     */
    public static gptRenameSession<ThrowOnError extends boolean = false>(options: Options<GptRenameSessionData, ThrowOnError>) {
        return (options?.client ?? client).put<GptRenameSessionResponse, GptRenameSessionError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions/{session_id}'
        });
    }
    
    /**
     * Delete Session
     */
    public static gptDeleteSession<ThrowOnError extends boolean = false>(options: Options<GptDeleteSessionData, ThrowOnError>) {
        return (options?.client ?? client).delete<GptDeleteSessionResponse, GptDeleteSessionError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions/{session_id}'
        });
    }
    
    /**
     * Chat
     */
    public static gptChat<ThrowOnError extends boolean = false>(options: Options<GptChatData, ThrowOnError>) {
        return (options?.client ?? client).post<GptChatResponse, GptChatError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/chat/{session_id}'
        });
    }
    
}

export class HealthCheckService {
    /**
     * <Lambda>
     */
    public static healthCheckLambda<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<HealthCheckLambdaResponse, HealthCheckLambdaError, ThrowOnError>({
            ...options,
            url: '/v1/health'
        });
    }
    
}