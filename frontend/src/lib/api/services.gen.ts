// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { LoginData, LoginError, LoginResponse, SignupUserData, SignupUserError, SignupUserResponse, FindUserByEmailData, FindUserByEmailError, FindUserByEmailResponse, GetPublicUserError, GetPublicUserResponse, GetUserDetailData, GetUserDetailError, GetUserDetailResponse, DeleteUserData, DeleteUserError, DeleteUserResponse, AddApiKeyData, AddApiKeyError, AddApiKeyResponse, ListSessionsError, ListSessionsResponse, CreateSessionError, CreateSessionResponse, GetSessionData, GetSessionError, GetSessionResponse, RenameSessionData, RenameSessionError, RenameSessionResponse, DeleteSessionData, DeleteSessionError, DeleteSessionResponse, ChatData, ChatError, ChatResponse, LambdaError, LambdaResponse } from './types.gen';

export const client = createClient(createConfig());

export class AuthService {
    /**
     * Login
     */
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
            ...options,
            ...urlSearchParamsBodySerializer,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            url: '/v1/auth/login'
        });
    }
    
    /**
     * Signup User
     * Request will be redirected to user route for user info
     */
    public static signupUser<ThrowOnError extends boolean = false>(options: Options<SignupUserData, ThrowOnError>) {
        return (options?.client ?? client).post<SignupUserResponse, SignupUserError, ThrowOnError>({
            ...options,
            url: '/v1/auth/signup'
        });
    }
    
}

export class UserService {
    /**
     * Find User By Email
     */
    public static findUserByEmail<ThrowOnError extends boolean = false>(options: Options<FindUserByEmailData, ThrowOnError>) {
        return (options?.client ?? client).get<FindUserByEmailResponse, FindUserByEmailError, ThrowOnError>({
            ...options,
            url: '/v1/users/'
        });
    }
    
    /**
     * Get Public User
     */
    public static getPublicUser<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetPublicUserResponse, GetPublicUserError, ThrowOnError>({
            ...options,
            url: '/v1/users/me'
        });
    }
    
    /**
     * Get User Detail
     * Private user info
     */
    public static getUserDetail<ThrowOnError extends boolean = false>(options: Options<GetUserDetailData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserDetailResponse, GetUserDetailError, ThrowOnError>({
            ...options,
            url: '/v1/users/{user_id}'
        });
    }
    
    /**
     * Delete User
     */
    public static deleteUser<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
            ...options,
            url: '/v1/users/{user_id}'
        });
    }
    
    /**
     * Add Api Key
     */
    public static addApiKey<ThrowOnError extends boolean = false>(options: Options<AddApiKeyData, ThrowOnError>) {
        return (options?.client ?? client).post<AddApiKeyResponse, AddApiKeyError, ThrowOnError>({
            ...options,
            url: '/v1/users/apikeys'
        });
    }
    
}

export class GptService {
    /**
     * List Sessions
     */
    public static listSessions<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<ListSessionsResponse, ListSessionsError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions'
        });
    }
    
    /**
     * Create Session
     */
    public static createSession<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<CreateSessionResponse, CreateSessionError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions'
        });
    }
    
    /**
     * Get Session
     */
    public static getSession<ThrowOnError extends boolean = false>(options: Options<GetSessionData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSessionResponse, GetSessionError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions/{session_id}'
        });
    }
    
    /**
     * Rename Session
     */
    public static renameSession<ThrowOnError extends boolean = false>(options: Options<RenameSessionData, ThrowOnError>) {
        return (options?.client ?? client).put<RenameSessionResponse, RenameSessionError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions/{session_id}'
        });
    }
    
    /**
     * Delete Session
     */
    public static deleteSession<ThrowOnError extends boolean = false>(options: Options<DeleteSessionData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteSessionResponse, DeleteSessionError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/sessions/{session_id}'
        });
    }
    
    /**
     * Chat
     */
    public static chat<ThrowOnError extends boolean = false>(options: Options<ChatData, ThrowOnError>) {
        return (options?.client ?? client).post<ChatResponse, ChatError, ThrowOnError>({
            ...options,
            url: '/v1/gpt/openai/chat/{session_id}'
        });
    }
    
}

export class HealthCheckService {
    /**
     * <Lambda>
     */
    public static lambda<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<LambdaResponse, LambdaError, ThrowOnError>({
            ...options,
            url: '/v1/health'
        });
    }
    
}