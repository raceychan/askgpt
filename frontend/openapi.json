{"openapi": "3.1.0", "info": {"title": "askgpt", "description": "Distributed GPT client built with love", "version": "1"}, "paths": {"/v1/auth/login": {"post": {"tags": ["auth"], "summary": "Login", "operationId": "login", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_auth-login"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/auth/signup": {"post": {"tags": ["auth"], "summary": "Signup", "description": "Request will be redirected to user route for user info", "operationId": "signup", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_auth-signup"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/users/": {"get": {"tags": ["user"], "summary": "Find User By Email", "operationId": "find_user_by_email", "parameters": [{"name": "email", "in": "query", "required": true, "schema": {"type": "string", "title": "Email"}}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}], "title": "Settings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PublicUserInfo"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/users/me": {"get": {"tags": ["user"], "summary": "Get Public User", "operationId": "get_public_user", "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}], "title": "Settings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PublicUserInfo"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/v1/users/{user_id}": {"get": {"tags": ["user"], "summary": "Get User Detail", "description": "Private user info", "operationId": "get_user_detail", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "title": "User Id"}}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}], "title": "Settings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/UserAuth"}, {"type": "null"}], "title": "Response User-Get User Detail"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["user"], "summary": "Delete User", "operationId": "delete_user", "security": [{"OAuth2PasswordBearer": []}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}], "title": "Settings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/users/apikeys": {"post": {"tags": ["user"], "summary": "Create New Key", "operationId": "create_new_key", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_user-create_new_key"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/v1/gpt/openai/sessions": {"get": {"tags": ["gpt"], "summary": "List Sessions", "operationId": "list_sessions", "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}], "title": "Settings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/PulibcSessionInfo"}, "type": "array", "title": "Response Gpt-List Sessions"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "post": {"tags": ["gpt"], "summary": "Create Session", "operationId": "create_session", "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}], "title": "Settings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/v1/gpt/openai/sessions/{session_id}": {"get": {"tags": ["gpt"], "summary": "Get Session", "operationId": "get_session", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "session_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Session Id"}}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}], "title": "Settings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "put": {"tags": ["gpt"], "summary": "Rename Session", "operationId": "rename_session", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "session_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Session Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_gpt-rename_session"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["gpt"], "summary": "Delete Session", "operationId": "delete_session", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "session_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Session Id"}}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}], "title": "Settings"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/gpt/openai/chat/{session_id}": {"post": {"tags": ["gpt"], "summary": "Chat", "operationId": "chat", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "session_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Session Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_gpt-chat"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/health": {"get": {"tags": ["health check"], "summary": "<Lambda>", "operationId": "<lambda>", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}}, "components": {"schemas": {"API": {"properties": {"HOST": {"type": "string", "title": "Host"}, "PORT": {"type": "integer", "title": "Port"}, "API_VERSION": {"type": "string", "title": "Api Version", "default": "1"}}, "additionalProperties": false, "type": "object", "required": ["HOST", "PORT"], "title": "API"}, "ActorRefs": {"properties": {"SYSTEM": {"type": "string", "title": "System", "default": "system"}, "EVENTLOG": {"type": "string", "title": "Eventlog", "default": "eventlog"}, "JOURNAL": {"type": "string", "title": "Journal", "default": "journal"}}, "additionalProperties": false, "type": "object", "title": "ActorRefs"}, "Body_auth-login": {"properties": {"settings": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}]}, "grant_type": {"anyOf": [{"type": "string", "pattern": "password"}, {"type": "null"}], "title": "Grant Type"}, "username": {"type": "string", "title": "Username"}, "password": {"type": "string", "title": "Password"}, "scope": {"type": "string", "title": "Scope", "default": ""}, "client_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Client Id"}, "client_secret": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Client Secret"}}, "type": "object", "required": ["username", "password"], "title": "Body_auth-login"}, "Body_auth-signup": {"properties": {"r": {"$ref": "#/components/schemas/SignUp"}, "settings": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}]}}, "type": "object", "required": ["r"], "title": "Body_auth-signup"}, "Body_gpt-chat": {"properties": {"req": {"$ref": "#/components/schemas/ChatCompletionRequest"}, "settings": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}]}}, "type": "object", "required": ["req"], "title": "Body_gpt-chat"}, "Body_gpt-rename_session": {"properties": {"req": {"$ref": "#/components/schemas/SessionRenameRequest"}, "settings": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}]}}, "type": "object", "required": ["req"], "title": "Body_gpt-rename_session"}, "Body_user-create_new_key": {"properties": {"r": {"$ref": "#/components/schemas/CreateNewKey"}, "settings": {"anyOf": [{"$ref": "#/components/schemas/Settings"}, {"type": "null"}]}}, "type": "object", "required": ["r"], "title": "Body_user-create_new_key"}, "CONNECT_ARGS": {"properties": {"server_settings": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Server Settings"}}, "additionalProperties": false, "type": "object", "title": "CONNECT_ARGS", "description": "Driver-specific connection arguments\nhttps://magicstack.github.io/asyncpg/current/api/index.html"}, "ChatCompletionRequest": {"properties": {"question": {"type": "string", "title": "Question"}, "role": {"type": "string", "enum": ["system", "user", "assistant", "function"], "title": "Role"}, "model": {"type": "string", "enum": ["gpt-3.5-turbo", "gpt-3.5-turbo-16k", "gpt-4", "gpt-4-32k", "gpt-4-1106-preview", "gpt-4-vision-preview"], "title": "Model", "default": "gpt-3.5-turbo"}, "frequency_penalty": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Frequency Penalty"}, "logit_bias": {"anyOf": [{"additionalProperties": {"type": "integer"}, "type": "object"}, {"type": "null"}], "title": "Logit Bias"}, "max_tokens": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Max Tokens"}, "n": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "N"}, "presence_penalty": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Presence Penalty"}, "response_format": {"title": "Response Format"}, "seed": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Seed"}, "stop": {"anyOf": [{"type": "string"}, {"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Stop"}, "stream": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Stream"}, "temperature": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Temperature"}, "tool_choice": {"title": "Tool Choice"}, "tools": {"anyOf": [{"items": {}, "type": "array"}, {"type": "null"}], "title": "Tools"}, "top_p": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Top P"}, "user": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "User"}, "extra_headers": {"anyOf": [{"additionalProperties": {"anyOf": [{"type": "string"}, {"type": "boolean", "enum": [false], "const": false}]}, "type": "object"}, {"type": "null"}], "title": "Extra Headers", "default": {}}, "extra_query": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Extra Query", "default": {}}, "extra_body": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Extra Body", "default": {}}, "timeout": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Timeout", "default": 120}}, "additionalProperties": false, "type": "object", "required": ["question", "role"], "title": "ChatCompletionRequest", "description": "    Creates a model response for the given chat conversation.\n\nArgs:\n  messages: A list of messages comprising the conversation so far.\n      [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).\n\n  model: ID of the model to use. See the\n      [model endpoint compatibility](https://platform.openai.com/docs/models/model-endpoint-compatibility)\n      table for details on which models work with the Chat API.\n\n  frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their\n      existing frequency in the text so far, decreasing the model's likelihood to\n      repeat the same line verbatim.\n\n      [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/gpt/parameter-details)\n\n\n  logit_bias: Modify the likelihood of specified tokens appearing in the completion.\n\n      Accepts a JSON object that maps tokens (specified by their token ID in the\n      tokenizer) to an associated bias value from -100 to 100. Mathematically, the\n      bias is added to the logits generated by the model prior to sampling. The exact\n      effect will vary per model, but values between -1 and 1 should decrease or\n      increase likelihood of selection; values like -100 or 100 should result in a ban\n      or exclusive selection of the relevant token.\n\n  max_tokens: The maximum number of [tokens](/tokenizer) to generate in the chat completion.\n\n      The total length of input tokens and generated tokens is limited by the model's\n      context length.\n      [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n      for counting tokens.\n\n  n: How many chat completion choices to generate for each input message.\n\n  presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on\n      whether they appear in the text so far, increasing the model's likelihood to\n      talk about new topics.\n\n      [See more information about frequency and presence penalties.](https://platform.openai.com/docs/guides/gpt/parameter-details)\n\n  response_format: An object specifying the format that the model must output. Used to enable JSON\n      mode.\n\n  seed: This feature is in Beta. If specified, our system will make a best effort to\n      sample deterministically, such that repeated requests with the same `seed` and\n      parameters should return the same result. Determinism is not guaranteed, and you\n      should refer to the `system_fingerprint` response parameter to monitor changes\n      in the backend.\n\n  stop: Up to 4 sequences where the API will stop generating further tokens.\n\n  stream: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be\n      sent as data-only\n      [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n      as they become available, with the stream terminated by a `data: [DONE]`\n      message.\n      [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n\n  temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\n      make the output more random, while lower values like 0.2 will make it more\n      focused and deterministic.\n\n      We generally recommend altering this or `top_p` but not both.\n\n  tool_choice: Controls which (if any) function is called by the model. `none` means the model\n      will not call a function and instead generates a message. `auto` means the model\n      can pick between generating a message or calling a function. Specifying a\n      particular function via\n      `{\"type: \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n      call that function.\n\n      `none` is the default when no functions are present. `auto` is the default if\n      functions are present.\n\n  tools: A list of tools the model may call. Currently, only functions are supported as a\n      tool. Use this to provide a list of functions the model may generate JSON inputs\n      for.\n\n  top_p: An alternative to sampling with temperature, called nucleus sampling, where the\n      model considers the results of the tokens with top_p probability mass. So 0.1\n      means only the tokens comprising the top 10% probability mass are considered.\n\n      We generally recommend altering this or `temperature` but not both.\n\n  user: A unique identifier representing your end-user, which can help OpenAI to monitor\n      and detect abuse.\n      [Learn more](https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids).\n\n  extra_headers: Send extra headers\n\n  extra_query: Add additional query parameters to the request\n\n  extra_body: Add additional JSON properties to the request\n\n  timeout: Override the client-level default timeout for this request, in seconds", "examples": [{"model": "gpt-4-1106-preview", "question": "enter your question here", "role": "user", "stream": true}]}, "CreateNewKey": {"properties": {"api_key": {"type": "string", "title": "Api Key"}, "api_type": {"$ref": "#/components/schemas/SupportedGPTs", "default": "openai"}}, "additionalProperties": false, "type": "object", "required": ["api_key"], "title": "CreateNewKey"}, "DB": {"properties": {"DIALECT": {"type": "string", "title": "Dialect"}, "DRIVER": {"type": "string", "title": "Driver"}, "USER": {"type": "string", "title": "User"}, "PASSWORD": {"type": "string", "title": "Password"}, "HOST": {"type": "string", "title": "Host", "default": ""}, "PORT": {"type": "integer", "title": "Port", "default": -1}, "DATABASE": {"anyOf": [{"type": "string", "format": "path"}, {"type": "string", "enum": [":memory:"], "const": ":memory:"}], "title": "Database"}, "ISOLATION_LEVEL": {"$ref": "#/components/schemas/SQL_ISOLATIONLEVEL"}, "ENGINE_ECHO": {"type": "boolean", "title": "Engine Echo", "default": false}, "connect_args": {"anyOf": [{"$ref": "#/components/schemas/CONNECT_ARGS"}, {"type": "null"}]}, "execution_options": {"anyOf": [{"$ref": "#/components/schemas/ExeuctionOptions"}, {"type": "null"}]}}, "additionalProperties": false, "type": "object", "required": ["DIALECT", "DRIVER", "USER", "PASSWORD", "DATABASE", "ISOLATION_LEVEL"], "title": "DB", "description": "Perhaps separate this for PGDB, SqliteDB, MysqlDB etc."}, "EventRecord": {"properties": {"EVENT_FETCH_INTERVAL": {"type": "number", "title": "Event Fetch Interval", "default": 0.1}}, "additionalProperties": false, "type": "object", "title": "EventRecord"}, "ExeuctionOptions": {"properties": {}, "additionalProperties": false, "type": "object", "title": "ExeuctionOptions", "description": "Sqlalchemy engine-specific options"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "KeySpace": {"prefixItems": [{"type": "string", "title": "Key", "default": ""}], "type": "array", "maxItems": 1}, "KeySpaces": {"properties": {"APP": {"$ref": "#/components/schemas/KeySpace"}}, "additionalProperties": false, "type": "object", "required": ["APP"], "title": "KeySpaces"}, "OpenAIClient": {"properties": {"TIMEOUT": {"type": "number", "title": "Timeout", "default": 30.0}, "MAX_RETRIES": {"type": "integer", "title": "Max Retries", "default": 3}}, "additionalProperties": false, "type": "object", "title": "OpenAIClient"}, "PublicUserInfo": {"properties": {"user_id": {"type": "string", "title": "User Id"}, "user_name": {"type": "string", "title": "User Name"}, "email": {"type": "string", "title": "Email"}}, "additionalProperties": false, "type": "object", "required": ["user_id", "user_name", "email"], "title": "PublicUserInfo"}, "PulibcSessionInfo": {"properties": {"session_id": {"type": "string", "title": "Session Id"}, "session_name": {"type": "string", "title": "Session Name"}}, "additionalProperties": false, "type": "object", "required": ["session_id", "session_name"], "title": "PulibcSessionInfo"}, "Redis": {"properties": {"SCHEME": {"type": "string", "enum": ["redis", "rediss", "unix"], "title": "Scheme", "default": "redis"}, "HOST": {"type": "string", "title": "Host"}, "PORT": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Port"}, "DB": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Db"}, "TOKEN_BUCKET_SCRIPT": {"type": "string", "format": "path", "title": "Token Bucket Script", "default": "askgpt/script/tokenbucket.lua"}, "MAX_CONNECTIONS": {"type": "integer", "title": "Max Connections", "default": 10}, "DECODE_RESPONSES": {"type": "boolean", "title": "Decode Responses", "default": true}, "SOCKET_TIMEOUT": {"type": "integer", "title": "Socket Timeout", "default": 10}, "SOCKET_CONNECT_TIMEOUT": {"type": "integer", "title": "Socket Connect Timeout", "default": 2}, "keyspaces": {"$ref": "#/components/schemas/KeySpaces"}}, "additionalProperties": false, "type": "object", "required": ["HOST", "PORT", "DB", "keyspaces"], "title": "Redis"}, "SQL_ISOLATIONLEVEL": {"type": "string", "enum": ["SERIALIZABLE", "REPEATABLE READ", "READ COMMITTED", "READ UNCOMMITTED", "AUTOCOMMIT"]}, "SUPPORTED_ALGORITHMS": {"type": "string", "enum": ["A192GCM", "HS384", "A256GCM", "RS512", "RSA1_5", "RS256", "A128KW", "ES512", "dir", "RSA-OAEP", "HS512", "RS384", "RSA-OAEP-256", "A256CBC-HS512", "ES384", "A256KW", "ES256", "HS256", "A128CBC-HS256", "A192CBC-HS384", "A128GCM", "A192KW"]}, "Security": {"properties": {"SECRET_KEY": {"type": "string", "title": "Secret Key"}, "ALGORITHM": {"$ref": "#/components/schemas/SUPPORTED_ALGORITHMS"}, "ACCESS_TOKEN_EXPIRE_MINUTES": {"type": "integer", "title": "Access Token Expire Minutes", "default": 10080}, "CORS_ORIGINS": {"items": {"type": "string"}, "type": "array", "title": "Cors Origins"}}, "additionalProperties": false, "type": "object", "required": ["SECRET_KEY", "ALGORITHM", "CORS_ORIGINS"], "title": "Security"}, "SessionRenameRequest": {"properties": {"name": {"type": "string", "title": "Name"}}, "additionalProperties": false, "type": "object", "required": ["name"], "title": "SessionRenameRequest"}, "Settings": {"properties": {"RUNTIME_ENV": {"type": "string", "enum": ["dev", "prod", "test"], "title": "Runtime Env"}, "db": {"$ref": "#/components/schemas/DB"}, "actor_refs": {"$ref": "#/components/schemas/ActorRefs"}, "security": {"$ref": "#/components/schemas/Security"}, "api": {"$ref": "#/components/schemas/API"}, "redis": {"$ref": "#/components/schemas/Redis"}, "throttling": {"$ref": "#/components/schemas/Throttling"}, "event_record": {"$ref": "#/components/schemas/EventRecord"}, "openai_client": {"$ref": "#/components/schemas/OpenAIClient"}}, "additionalProperties": false, "type": "object", "required": ["RUNTIME_ENV", "db", "actor_refs", "security", "api", "redis", "throttling", "event_record", "openai_client"], "title": "Settings"}, "SignUp": {"properties": {"user_name": {"type": "string", "title": "User Name", "default": ""}, "email": {"type": "string", "format": "email", "title": "Email"}, "password": {"type": "string", "title": "Password"}}, "additionalProperties": false, "type": "object", "required": ["email", "password"], "title": "SignUp"}, "SupportedGPTs": {"type": "string", "enum": ["openai"], "const": "openai"}, "Throttling": {"properties": {"USER_MAX_REQUEST_PER_MINUTE": {"type": "integer", "title": "User Max Request Per Minute"}, "USER_MAX_REQUEST_DURATION_MINUTE": {"type": "integer", "title": "User Max Request Duration Minute"}}, "additionalProperties": false, "type": "object", "required": ["USER_MAX_REQUEST_PER_MINUTE", "USER_MAX_REQUEST_DURATION_MINUTE"], "title": "Throttling"}, "TokenResponse": {"properties": {"access_token": {"type": "string", "title": "Access Token"}, "token_type": {"type": "string", "enum": ["bearer"], "const": "bearer", "title": "Token Type", "default": "bearer"}}, "additionalProperties": false, "type": "object", "required": ["access_token"], "title": "TokenResponse"}, "UserAuth": {"properties": {"user_id": {"type": "string", "title": "User Id"}, "role": {"$ref": "#/components/schemas/UserRoles", "default": "user"}, "credential": {"$ref": "#/components/schemas/UserCredential"}, "last_login": {"type": "string", "format": "date-time", "title": "Last Login"}, "is_active": {"type": "boolean", "title": "Is Active", "default": true}}, "type": "object", "required": ["user_id", "credential", "last_login"], "title": "UserAuth"}, "UserCredential": {"properties": {"user_name": {"type": "string", "title": "User Name", "default": ""}, "user_email": {"type": "string", "format": "email", "title": "User Email"}, "hash_password": {"type": "string", "title": "Hash Password"}}, "type": "object", "required": ["user_email", "hash_password"], "title": "UserCredential"}, "UserRoles": {"type": "string", "enum": ["admin", "user"], "title": "UserRoles"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "auth/login"}}}}}}